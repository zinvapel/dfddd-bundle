openapi: 3.0.0

info:
  description: "Pastva messenger"
  version: "1.0.0beta"
  title: "Pastva messenger"

servers:
  - url: "http://pastva.local:8081"

security:
 - token: []

tags:
  - name: Auth
  - name: User
  - name: Project
  - name: Channel
  - name: Message
  - name: Chat

paths:
  /login:
    post:
      security: []
      summary: Login
      tags: ["Auth"]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  maxLength: 128
                password:
                  type: string
              required:
                - login
                - password
      responses:
        200:
          description: Done
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFull"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c; Path=/; HttpOnly
        400:
          description: Invalid data
  /logout:
    post:
      summary: Logout
      tags: ["Auth"]
      responses: 
        200:
          description: Done
  
  # USER
  /user:
    get:
      summary: Get users
      tags: ["User"]
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    minimum: 1
                  items:
                    type: array
                    items:
                      oneOf:
                        - $ref: "#/components/schemas/User"
                        - $ref: "#/components/schemas/UserFull"
                required:
                  - count
                  - items
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /user/{id}:
    get:
      summary: Get user
      tags: ["User"]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/User"
                  - $ref: "#/components/schemas/UserFull"
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  # PROJECT
  /project:
    get:
      summary: Get projects
      tags: ["Project"]
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    minimum: 1
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProjectExtended"
                required:
                  - count
                  - items
        401:
          description: Unauthorized
        403:
          description: Forbidden

  /project/{id}:
    get:
      summary: Get project
      tags: ["Project"]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectExtended"
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  # CHANNEL
  /project/{id}/channel/{channelId}:
    get:
      summary: Get channel
      tags: ["Channel"]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
        - name: channelId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelExtended"
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  # MESSAGES
  /project/{id}/channel/{channelId}/message:
    get:
      summary: Get project messages
      tags: ["Message"]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
        - name: channelId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
        - name: fromId
          in: query
          schema:
            type: integer
            minimum: 1
          required: false
        - name: threadId
          in: query
          schema:
            type: integer
            minimum: 1
          required: false
        - name: limit
          in: query
          schema:
            type: integer
            minimum: -100
            maximum: 100
          required: false
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      anyOf:
                        - $ref: "#/components/schemas/Message"
                        - $ref: "#/components/schemas/Thread"
                required:
                  - items
        401:
          description: Unauthorized
        403:
          description: Forbidden
    post:
      summary: Publish message
      tags: ["Message"]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
        - name: channelId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessagePrototype"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        400:
          description: Invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                        error:
                          type: string
                      required:
                        - path
                        - error
                required:
                  - errors
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /project/{id}/channel/{channelId}/message/{messageId}:
    patch:
      summary: Edit message
      tags: ["Message"]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
        - name: channelId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
        - name: messageId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessagePrototype"
      responses:
        200:
          description: Done
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Message"
                  - $ref: "#/components/schemas/Thread"
        400:
          description: Invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                        error:
                          type: string
                      required:
                        - path
                        - error
                required:
                  - errors
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found

  # CHAT
  /chat:
    get:
      summary: Get chats
      tags: ["Chat"]
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    minimum: 1
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/ChatWithStat"
                required:
                  - count
                  - items
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /chat/{id}/message:
    get:
      summary: Get chat messages
      tags: ["Chat"]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
        - name: fromId
          in: query
          schema:
            type: integer
            minimum: 1
          required: false
        - name: threadId
          in: query
          schema:
            type: integer
            minimum: 1
          required: false
        - name: limit
          in: query
          schema:
            type: integer
            minimum: -100
            maximum: 100
          required: false
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      anyOf:
                        - $ref: "#/components/schemas/ChatMessage"
                        - $ref: "#/components/schemas/ChatThread"
                required:
                  - items
        401:
          description: Unauthorized
        403:
          description: Forbidden
    post:
      summary: Publish message to chat
      tags: ["Chat"]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatMessagePrototype"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatMessage"
        400:
          description: Invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                        error:
                          type: string
                      required:
                        - path
                        - error
                required:
                  - errors
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /chat/{id}/message/{messageId}:
    patch:
      summary: Edit chat message
      tags: ["Chat"]
      parameters:
        - name: id
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
        - name: messageId
          in: path
          schema:
            type: integer
            minimum: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatMessagePrototype"
      responses:
        200:
          description: Done
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/ChatMessage"
                  - $ref: "#/components/schemas/ChatThread"
        400:
          description: Invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                        error:
                          type: string
                      required:
                        - path
                        - error
                required:
                  - errors
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not found


components:
  securitySchemes:
    token:
      type: apiKey
      in: cookie
      name: TOKEN

  schemas:
    UserShort:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
          maxLength: 128
      required:
        - id
        - name
    User:
      allOf:
        - $ref: "#/components/schemas/UserShort"
        - type: object
          properties:
            lastVisitAt:
              type: string
              format: date-time
            createdAt:
              type: string
              format: date-time
          required:
            - lastVisitAt
            - createdAt
    UserFull:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            roles:
              type: array
              items:
                type: string
                enum: ["ROLE_GUEST", "ROLE_MEMBER", "ROLE_ADMIN"]
              minItems: 1
          required:
            - roles
    ProjectExtended:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        name:
          type: string
          maxLength: 256
        shortName:
          type: string
          maxLength: 4
        members:
          type: array
          items:
            type: object
            properties:
              user:
                $ref: "#/components/schemas/UserShort"
            required:
              - user
        channels:
          type: array
          items:
            $ref: "#/components/schemas/ChannelWithStat"
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - shortName
        - members
        - createdAt
        - channels
    Channel:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        projectId:
          type: integer
          minimum: 1
        name:
          type: string
          maxLength: 256
        members:
          type: array
          items:
            $ref: "#/components/schemas/ChannelMember"
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - projectId
        - name
        - members
        - createdAt
    ChannelWithStat:
      allOf:
        - $ref: "#/components/schemas/Channel"
        - type: object
          properties:
            stat:
              type: object
              properties:
                unreadCount:
                  type: integer
                  minimum: 0
                mentionsCount:
                  type: integer
                  minimum: 0
                assignee:
                  type: array
                  items:
                    $ref: "#/components/schemas/Message"
              required:
                - unreadCount
                - mentionsCount
                - assignee
          required:
            - stat
    ChannelExtended:
      allOf:
        - $ref: "#/components/schemas/ChannelWithStat"
        - type: object
          properties:
            messages:
              type: object
              properties:
                lastReaded:
                  anyOf:
                    - $ref: "#/components/schemas/Message"
                    - $ref: "#/components/schemas/Thread"
                last:
                  type: array
                  items:
                    anyOf:
                      - $ref: "#/components/schemas/Message"
                      - $ref: "#/components/schemas/Thread"
                  minLength: 0
                  maxLength: 3
              required:
                - lastReaded
                - last
          required:
            - messages
    ChannelMember:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserShort"
        roles:
          type: array
          items:
            type: string
            enum: ["can_read", "can_write", "can_manage", "can_create_thread"]
          maxItems: 1
      required:
        - user
        - roles
    Message:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        isReaded:
          type: boolean
        channelId:
          type: integer
          minimum: 1
        projectId:
          type: integer
          minimum: 1
        parentId:
          type: integer
          minimum: 1
        threadId:
          type: integer
          minimum: 1
        message:
          type: string
        author:
          $ref: "#/components/schemas/UserShort"
        entities:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: ["mention", "hashtag", "assignee"]
              position:
                type: integer
                minimum: 0
              value:
                type: string
                maxLength: 256
            required:
              - type
              - position
              - value
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - isReaded
        - channelId
        - projectId
        - message
        - author
        - entities
        - createdAt
    Thread:
      allOf:
        - $ref: "#/components/schemas/Message"
        - type: object
          properties:
            underThread:
              type: array
              items:
                $ref: "#/components/schemas/Message"
          required:
            - underThread
    MessagePrototype:
      type: object
      properties:
        parentId:
          type: integer
          minimum: 1
        threadId:
          type: integer
          minimum: 1
        message:
          type: string
        assignee:
          type: array
          items:
            $ref: "#/components/schemas/UserShort"
      required:
        - message
    Chat:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        firstMember:
          $ref: "#/components/schemas/UserShort"
        secondMember:
          $ref: "#/components/schemas/UserShort"
        status:
          type: string
          enum: ['active', 'inactive']
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - firstMember
        - secondMember
        - status
        - createdAt
    ChatWithStat:
      allOf:
        - $ref: "#/components/schemas/Chat"
        - type: object
          properties:
            stat:
              type: object
              properties:
                unreadCount:
                  type: integer
                  minimum: 0
                mentionsCount:
                  type: integer
                  minimum: 0
              required:
                - unreadCount
                - mentionsCount
          required:
            - stat
    ChatExtended:
      allOf:
        - $ref: "#/components/schemas/ChatWithStat"
        - type: object
          properties:
            messages:
              type: object
              properties:
                lastReaded:
                  anyOf:
                    - $ref: "#/components/schemas/ChatMessage"
                    - $ref: "#/components/schemas/ChatThread"
                last:
                  type: array
                  items:
                    anyOf:
                      - $ref: "#/components/schemas/ChatMessage"
                      - $ref: "#/components/schemas/ChatThread"
                  minLength: 0
                  maxLength: 3
              required:
                - lastReaded
                - last
          required:
            - messages
    ChatMessage:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        isReaded:
          type: boolean
        parentId:
          type: integer
          minimum: 1
        threadId:
          type: integer
          minimum: 1
        message:
          type: string
        author:
          $ref: "#/components/schemas/UserShort"
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - isReaded
        - message
        - author
        - createdAt
    ChatThread:
      allOf:
        - $ref: "#/components/schemas/ChatMessage"
        - type: object
          properties:
            underThread:
              type: array
              items:
                $ref: "#/components/schemas/ChatMessage"
          required:
            - underThread
    ChatMessagePrototype:
      type: object
      properties:
        parentId:
          type: integer
          minimum: 1
        threadId:
          type: integer
          minimum: 1
        message:
          type: string
      required:
        - message


externalDocs:
  description: "Backend source"
  url: "https://gitlab.com/damir.in/pastva/api/-/blob/master/README.md"